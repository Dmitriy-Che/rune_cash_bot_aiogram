import logging
from aiogram import Bot, Dispatcher, types, executor
import json
import os
from random import choice

API_TOKEN = os.getenv("API_TOKEN")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

CONFIG_FILE = 'rune_cash_bot_config.json'
LEADS_FILE = 'leads.json'

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if os.path.exists(CONFIG_FILE):
    with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
        config = json.load(f)
else:
    config = {
        "welcome_text": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ‚ú¶ –ú–∞–≥–∏—é –∏ –î–µ–Ω—å–≥–∏ ‚ú¶\n\nüßø –ü–æ–¥–∫–ª—é—á–∞—é —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤.\n\nüîÆ –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å üîÅ —Ä–∏—Ç—É–∞–ª –ø—Ä–æ—Ü–≤–µ—Ç–∞–Ω–∏—è.",
        "offer_texts": [
            "üí∞ –ü–æ–ª—É—á–∏ –¥–æ—Å—Ç—É–ø –∫ *—Ç–∞–π–Ω–æ–º—É —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É*!",
            "üåÄ –ù–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–æ–±–∏–ª–∏—è —É–∂–µ —Ä—è–¥–æ–º‚Ä¶"
        ],
        "button_text": "‚ú® –ñ–º–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ‚ú®",
        "ref_link": "https://clicktvf.com/ELAb"
    }

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–¥–∞
def save_lead(user: types.User):
    lead = {"id": user.id, "name": user.full_name, "username": user.username}
    leads = []
    if os.path.exists(LEADS_FILE):
        with open(LEADS_FILE, 'r', encoding='utf-8') as f:
            leads = json.load(f)
    if not any(l['id'] == lead['id'] for l in leads):
        leads.append(lead)
        with open(LEADS_FILE, 'w', encoding='utf-8') as f:
            json.dump(leads, f, ensure_ascii=False, indent=2)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    save_lead(message.from_user)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text=config["button_text"], url=config["ref_link"]))
    await message.answer(config["welcome_text"], reply_markup=keyboard)

# –û—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler()
async def echo_random_offer(message: types.Message):
    text = f"{choice(config['offer_texts'])}\n\nüëâ {config['ref_link']}"
    await message.answer(text, parse_mode="Markdown")

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç...")
    executor.start_polling(dp, skip_updates=True)
